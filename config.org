* Defaults
** Don't beep at me

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

** Answering 'y' or 'no'

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
   
* Theme
** Zenburn 

[[https://github.com/bbatsov/zenburn-emacs][Zenburn]] is a nice low contrast theme.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
               :ensure t)
#+END_SRC

* Completion Framework
** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] a light weight fuzzy search completion framework. Set some basic settings 
particularly useful for new Ivy users.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
               :ensure t
               :init
               (setq ivy-use-virtual-buffers t)
               (setq ivy-count-format "(%d/%d) ")
               (ivy-mode 1))
#+END_SRC

* Source Control
** Magit

A great interface for git projects. Itâ€™s much more pleasant to use than the git 
interface on the command line. Use an easy keybinding to access magit.

#+BEGIN_SRC emacs-lisp
  (use-package magit
               :ensure t
               :defer t
               :bind ("C-x g" . magit-status)
               :config
               (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC

*** Fullscreen magit
The following code makes magit-status run alone in the frame, and then 
restores the old window configuration when you quit out of magit.

#+BEGIN_SRC emacs-lisp
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen)) 
#+END_SRC

* Org Mode
** Org babel/source blocks
Enables source blocks syntax highlights and makes the editing popup 
window stay within the same window.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
#+END_SRC

* Parinfer
[[https://github.com/DogLooksGood/parinfer-mode/blob/master/README.org][Parinfer]] infers lisp parentheses based on indentation. 

#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults   
              pretty-parens  
              paredit      
              smart-tab     
              smart-yank)) 
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC

** Modes
Has two modes indent mode and paren mode. Mode
can be toggled with C-,

*** Indent Mode
Indent Mode gives you full control of indentation, 
while Parinfer corrects parens.

*** Paren Mode
Paren Mode gives you full control of parens, 
while Parinfer corrects indentation.

