* Installing Emacs
** OSX

Install emacs using homebrew.

#+BEGIN_SRC sh
brew install emacs --with-cocoa
#+END_SRC

Create an alias for emacs and move it to the application folder, this is supported
by spotlight.

#+BEGIN_SRC sh
osascript -e 'tell application "Finder" to make alias file to POSIX file "/usr/local/opt/emacs/Emacs.app" at POSIX file "/Applications"'
#+END_SRC

* External Dependencies
** The Silver Searcher

The search functionality of some packages (dumb-jump and projectile) depends
on the silver search for speed.

#+BEGIN_SRC sh
brew install the_silver_searcher
#+END_SRC

** Aspell

Spellcheck depends on aspell.

#+BEGIN_SRC sh
brew install aspell
#+END_SRC

* Defaults
** Turn off alarms completely

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Answering 'y' or 'n'

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Keep all backup and auto-save files in one directory

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** Kill current buffer rather than bringing up list

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

** Delete excess backup versions silently

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1 )
#+END_SRC

** Use version control

#+BEGIN_SRC emacs-lisp
(setq version-control t )
#+END_SRC

** Don't ask for confirmation when opening symlinked file

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t )
#+END_SRC

** Warn when opening large files

Warn when opening files bigger than 100MB.

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** Mode line settings

Add line and column number as well as file size to mode line.

#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
#+END_SRC

** Use Utf-8 encoding

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** Smooth scrolling

Make scrolling in buffers less jumpy.

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 0
    scroll-conservatively 100000
    scroll-preserve-screen-position 1)
#+END_SRC

** Display Help in same window

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
       '("*Help*" display-buffer-same-window))
#+END_SRC

** Disable all arrow keys

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<left>"))
(global-unset-key (kbd "<right>"))
(global-unset-key (kbd "<up>"))
(global-unset-key (kbd "<down>"))
(global-unset-key (kbd "<C-left>"))
(global-unset-key (kbd "<C-right>"))
(global-unset-key (kbd "<C-up>"))
(global-unset-key (kbd "<C-down>"))
(global-unset-key (kbd "<M-left>"))
(global-unset-key (kbd "<M-right>"))
(global-unset-key (kbd "<M-up>"))
(global-unset-key (kbd "<M-down>"))
#+END_SRC

** Super save

[[https://github.com/bbatsov/super-save][Super-save]] auto-saves your buffers, when certain events happen - e.g. you
switch between buffers, an Emacs frame loses focus, etc.

#+BEGIN_SRC emacs-lisp
(use-package super-save
  :ensure t
  :diminish super-save-mode
  :config
  (super-save-mode t))
#+END_SRC

** Reopen with recent buffers

Saves buffers between sessions.

#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC

* Appearance
** Menu, tool and scroll bars

Hide menu bar.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

Hide scroll and tool bar when not in terminal mode.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (scroll-bar-mode -1)
  (tool-bar-mode -1))
#+END_SRC

** Splash screen

Disables default splash screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t
    inhibit-startup-message t
    inhibit-startup-echo-area-message t)
#+END_SRC

** Theme
*** Doom

Doom theme is a nice theme collection.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :defer t)
#+END_SRC

*** Set light/dark themes

Sets light/dark themes, and loads initial theme.

#+BEGIN_SRC emacs-lisp
(setq dark-theme 'doom-one)
(setq light-theme 'doom-one-light)

(setq active-theme dark-theme)

(load-theme active-theme t)
#+END_SRC

*** Toggle light/dark

Function for toggling between light and dark themes.

#+BEGIN_SRC emacs-lisp

(defun toggle-dark-light-theme ()
  (interactive)
  (disable-theme active-theme)
  (if (eq active-theme light-theme)
    (setq active-theme dark-theme)
    (setq active-theme light-theme))
  (load-theme active-theme t))
#+END_SRC

** Modeline

Doom modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :defer t
      :hook (after-init . doom-modeline-init))
#+END_SRC

Requires all-the-icons.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
      :ensure t
      :defer t)
#+END_SRC

You will need to run the command below once:

M-x all-the-icons-install-fonts

** Title bar

Title bar matches theme.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist
             '(ns-appearance . dark))
#+END_SRC

Remove title bar icon and file name.

#+BEGIN_SRC emacs-lisp
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)
#+END_SRC

** Initial frame
*** Size

Sets the initial frame to fill the screen.

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

*** Position

Sets the initial frame to be flush with the top left corner of the screen.

#+BEGIN_SRC emasc-lisp
(add-to-list 'initial-frame-alist '(left . 0))
(add-to-list 'initial-frame-alist '(top . 0))
#+END_SRC
** Cursor shape

#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC

** Font

Sets font and font size.

#+BEGIN_SRC emacs-lisp
(set-default-font "Monaco 14")
#+END_SRC

* Text Manipulation
** Delete selected region when typing

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

** Only use spaces

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Tab width

Set tab width.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

** Contextual tab

Tab will now contextually indent or complete.

#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

** Flyspell

Turn spellcheck on, sets it to use aspell and british spelling.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t
  :config
  (setq ispell-program-name "aspell"
    ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))
  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode))
#+END_SRC

** Undo tree

[[https://www.emacswiki.org/emacs/UndoTree][Undo-tree]] enables conventional undo-redo behaviour.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :bind (("s-Z" . undo-tree-redo)
     ("s-z" . undo-tree-undo))
  :config
  (setq undo-tree-history-directory-alist
    `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t))
#+END_SRC

** White space

[[https://www.emacswiki.org/emacs/WhiteSpace][whitespace]] cleans white space on save.

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure t
  :init
  (add-hook 'before-save-hook #'whitespace-cleanup))
#+END_SRC

** Sentence should end with only a full stop

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Back to indentation or beginning

#+BEGIN_SRC emacs-lisp
(defun back-to-indentation-or-beginning () (interactive)
   (if (= (point) (progn (back-to-indentation) (point)))
       (beginning-of-line)))

(global-set-key (kbd "C-a") 'back-to-indentation-or-beginning)
#+END_SRC

* Navigation
** Recent files

[[https://www.emacswiki.org/emacs/RecentFiles][Recentf]] is a minor mode that builds a list of recently opened files.

#+BEGIN_SRC emacs-lisp
(recentf-mode t)
#+END_SRC

** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] a light weight fuzzy search completion framework.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
       :ensure t
       :diminish ivy-mode
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       :init
       (ivy-mode t))
#+END_SRC

** Swiper

[[https://github.com/abo-abo/swiper][Swiper]] an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-s" . swiper)
    ("s-f" . swiper))
#+END_SRC

** Ag (Silver Searcher)

[[https://github.com/Wilfred/ag.el][Ag]] allows you to search using ag from inside Emacs. You can filter
by file type, edit results inline, or find files.

#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC

* Project Management
** Magit

[[https://magit.vc/][Magit]] is a great interface for git projects.

#+BEGIN_SRC emacs-lisp
  (use-package magit
       :ensure t
       :defer t
       :bind ("C-c g" . magit-status)
       :config
       (setq magit-completing-read-function 'ivy-completing-read))
#+END_SRC

*** Fullscreen magit

The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

#+BEGIN_SRC emacs-lisp
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+END_SRC

** Org mode
*** Org babel/source blocks
Enables source blocks syntax highlights and makes the editing popup
window stay within the same window.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package projectile
     :ensure t
     :config
     (setq projectile-completion-system 'ivy)
     :init
     (projectile-global-mode))
#+END_SRC

* Programming Languages
** General
*** Show line numbers

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

*** Company mode

[[https://github.com/company-mode/company-mode][Company]] is a text completion framework for Emacs. The name stands
for "complete anything". It uses pluggable back-ends and front-ends
to retrieve and display completion candidates.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

*** Flycheck

[[https://github.com/flycheck/flycheck][Flycheck]] on-the-fly syntax checking extension.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

*** Compilation buffers display ANSI

#+BEGIN_SRC emacs-lisp
(ignore-errors
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
  (when (eq major-mode 'compilation-mode)
    (ansi-color-apply-on-region compilation-filter-start (point-max))))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))
#+END_SRC

*** Aggressive Indent

Automatically keeps things indented.

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config
  (global-aggressive-indent-mode))
#+END_SRC

*** Smartparens

Smartparens paredit for all the things.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
    :ensure t
    :config
    (progn
      (show-smartparens-global-mode t))
    :init
    (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
    :bind (:map smartparens-mode-map
          ("C-(" . sp-backward-slurp-sexp)
          ("C-{" . sp-backward-barf-sexp)
          ("C-)" . sp-forward-slurp-sexp)
          ("C-}" . sp-forward-barf-sexp)))
#+END_SRC

** Clojure
*** Clojure Mode

Font locking for clojure.

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t)
#+END_SRC

*** Inf-Clojure

Minimalist repl integration.

#+BEGIN_SRC emacs-lisp
(use-package inf-clojure
  :ensure t
  :config
  (add-hook 'clojure-mode-hook 'inf-clojure-minor-mode))
#+END_SRC
