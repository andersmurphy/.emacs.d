* Installing Emacs
** OSX

Install emacs using homebrew.

#+BEGIN_SRC sh
brew install emacs --with-cocoa
#+END_SRC

Symlink Emacs.app to application folder (isn't supported by spotlight).

#+BEGIN_SRC sh
brew linkapps emacs
#+END_SRC 

Remove the symlink.

#+BEGIN_SRC sh
rm /Applications/Emacs.app
#+END_SRC 

Create an alias for emacs and move it to the application folder, this is supported
by spotlight.

#+BEGIN_SRC sh 
osascript -e 'tell application "Finder" to make alias file to POSIX file "/usr/local/opt/emacs/Emacs.app" at POSIX file "/Applications"'
#+END_SRC
* Defaults
** Turn off alarms completly

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Answering 'y' or 'no'

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
   
** Keep all backup and auto-save files in one directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC
* Shell
** exec-path-from-shell
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] makes emacs shell behave like local shell.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)
#+END_SRC

Sets $MANPATH, $PATH and exec-path from your shell, but only on OS X.
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize))
#+END_SRC
* Theme
** Zenburn 

[[https://github.com/bbatsov/zenburn-emacs][Zenburn]] is a nice low contrast theme.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
               :ensure t)
#+END_SRC

* Completion Framework
** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] a light weight fuzzy search completion framework. Set some basic settings 
particularly useful for new Ivy users.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
               :ensure t
               :init
               (setq ivy-use-virtual-buffers t)
               (setq ivy-count-format "(%d/%d) ")
               (ivy-mode 1))
#+END_SRC

* Source Control
** Magit

[[https://magit.vc/][Magit]] is a great interface for git projects.

#+BEGIN_SRC emacs-lisp
  (use-package magit
               :ensure t
               :defer t
               :bind ("C-x g" . magit-status)
               :config
               (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC

*** Fullscreen magit
The following code makes magit-status run alone in the frame, and then 
restores the old window configuration when you quit out of magit.

#+BEGIN_SRC emacs-lisp
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen)) 
#+END_SRC

* Org Mode
** Org babel/source blocks
Enables source blocks syntax highlights and makes the editing popup 
window stay within the same window.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
#+END_SRC

* Lisps
** Parinfer
[[https://github.com/DogLooksGood/parinfer-mode/blob/master/README.org][Parinfer]] infers lisp parentheses based on indentation. 

#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults   
              pretty-parens  
              paredit      
              smart-tab     
              smart-yank)) 
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
* Ruby
** Show line numbers in ruby mode
#+BEGIN_SRC emacs-lisp
(add-hook 'ruby-mode-hook (lambda () (linum-mode t)))
#+END_SRC

** Ruby Electric

[[https://github.com/qoobaa/ruby-electric][ruby-electric]] autoclosea paired syntax elements like parens, quotes, etc
#+BEGIN_SRC emacs-lisp
(use-package ruby-electric 
  :ensure t)
#+END_SRC

Tie electric-mode to ruby-mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'ruby-mode-hook 'ruby-electric-mode)
#+END_SRC
** Other files that should be treated as ruby code 
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . ruby-mode))
(add-to-list 'auto-mode-alist
             '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . ruby-mode))
#+END_SRC
