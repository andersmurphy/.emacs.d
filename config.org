# C-c ' (org-edit-special) toggles org-edit-src-code on src blocks.
# Reload config with M-x reload-config.

* Defaults
** Exec-path-from-shell

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] ensures environment variables inside GUI Emacs look the same as in the user's shell on OSX.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Start emacs server

Open file in existing emacs window (rather than a new session) when clicking on a file in finder.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

** Super save

[[https://github.com/bbatsov/super-save][Super-save]] auto-saves your buffers, when certain events happen - e.g. you
switch between buffers, an Emacs frame loses focus, etc.

#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish super-save-mode
  :config
  (super-save-mode t)
  (setq save-silently t))
#+END_SRC

** Update Packages
#+BEGIN_SRC emacs-lisp
(defun update-emacs-packages ()
  (interactive)
  (straight-pull-all)
  (straight-freeze-versions))
#+END_SRC

** Reloading config

Function for reloading config.

#+BEGIN_SRC emacs-lisp
(defun reload-config ()
  (interactive)
    (save-buffer)
    (straight-transaction
      (load-file  "~/.emacs.d/init.el")))
#+END_SRC

** Turn off alarms completely

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Answering 'y' or 'n'

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable dialog boxes

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC

** Disable all backups

That's what git is for.

#+BEGIN_SRC emacs-lisp
(setq-default  auto-save-default nil
               create-lockfiles nil
               history-length 500
               make-backup-files nil)
#+END_SRC

** Kill current buffer rather than bringing up list

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

** Don't ask for confirmation when opening symlinked file

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t )
#+END_SRC

** Warn when opening large files

Warn when opening files bigger than 100MB.

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** Use Utf-8 encoding

#+BEGIN_SRC emacs-lisp
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system        'utf-8)
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
#+END_SRC

** Display Help in same window

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
       '("*Help*" display-buffer-same-window))
#+END_SRC

** Disable all arrow keys

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<left>"))
(global-unset-key (kbd "<right>"))
(global-unset-key (kbd "<up>"))
(global-unset-key (kbd "<down>"))
(global-unset-key (kbd "<C-left>"))
(global-unset-key (kbd "<C-right>"))
(global-unset-key (kbd "<C-up>"))
(global-unset-key (kbd "<C-down>"))
(global-unset-key (kbd "<M-left>"))
(global-unset-key (kbd "<M-right>"))
(global-unset-key (kbd "<M-up>"))
(global-unset-key (kbd "<M-down>"))
#+END_SRC

** Switch window focus on split

Switch window focus on split.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x 2")
                (lambda () (interactive)(split-window-below) (other-window 1)))
(global-set-key (kbd "C-x 3")
                (lambda () (interactive)(split-window-right) (other-window 1)))
#+END_SRC

** Dired
*** Dired auto-revert

Ensures Dired file lists are refreshed when files are created/deleted/renamed.
Also hides auto revert message.

#+BEGIN_SRC emacs-lisp
(setq dired-auto-revert-buffer t)
#+END_SRC

*** Dired hide details by default

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

*** Enable find alternate file

Bind return to alternate file, so that dired reuses same buffer.

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    :bind (:map dired-mode-map
                ("RET" . dired-find-alternate-file)))
#+END_SRC

*** WDired

WDired (writable dired) can be accessed by making the dired buffer writable with the binding C-x C-q. Any change you make to the buffer will remain unchanged until you commit them by typing C-c C-c. To cancel the changes and revert to the original state you can type C-c k.

The feature bellow force confirmation in the case of potential overwrites caused by rename.

#+BEGIN_SRC emacs-lisp
(setq wdired-confirm-overwrite t)
#+END_SRC

** Ask for confirmation when closing emacs

Ask for confirmation when closing emacs.

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Show keystrokes ASAP
#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC
** Disable mouse

Disables mouse.

#+BEGIN_SRC emacs-lisp
(use-package disable-mouse
  :config
  (global-disable-mouse-mode))
#+END_SRC

** Don't ask for confirmation when killing buffers with process

#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions nil)
#+END_SRC

** Default initial buffer to local persistent scratch.org file

#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice "~/.emacs.d/scratch.org")
(setq initial-scratch-message "")
#+END_SRC

* Appearance
** Menu, tool and scroll bars

Hide menu bar.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

Hide scroll and tool bar when not in terminal mode.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (scroll-bar-mode -1)
  (tool-bar-mode -1))
#+END_SRC

** Splash screen

Disables default splash screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t
    inhibit-startup-message t
    inhibit-startup-echo-area-message t)
#+END_SRC

** Theme
*** Doom

[[doom-spacegrey][Doom]] themes.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq my/theme 'doom-solarized-light)
  (load-theme my/theme t)
  (custom-theme-set-faces
   my/theme
   `(font-lock-type-face ((t (:foreground ,(doom-color 'fg)))))
   `(font-lock-keyword-face ((t (:foreground ,(doom-color 'fg)))))
   `(font-lock-variable-name-face ((t (:foreground ,(doom-color 'functions)))))
   `(font-lock-function-name-face ((t (:foreground ,(doom-color 'functions)))))
   `(font-lock-constant-face ((t (:foreground ,(doom-color 'constants)))))
   `(font-lock-builtin-face ((t (:foreground ,(doom-color 'constants)))))
   `(font-lock-string-face ((t (:foreground ,(doom-color 'teal)))))))
#+END_SRC

*** Hook for after theme load

#+BEGIN_SRC emacs-lisp
(defun my/flycheck-use-line ()
  (set-face-attribute 'flycheck-error nil
                      :underline `(:style line :color ,(doom-color 'red)))
  (set-face-attribute 'flycheck-warning nil
                      :underline `(:style line :color ,(doom-color 'yellow)))
  (set-face-attribute 'flycheck-info nil
                      :underline `(:style line :color ,(doom-color 'green)))
  (set-face-attribute 'flyspell-incorrect nil
                      :underline `(:style line :color ,(doom-color 'red))
                      :inherit 'unspecified)
  (set-face-attribute 'flyspell-duplicate nil
                      :underline `(:style line :color ,(doom-color 'yellow))
                      :inherit 'unspecified))

(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
   (run-hooks 'after-load-theme-hook))

(add-hook
 'after-load-theme-hook
 'my/flycheck-use-line)
#+END_SRC

** Modeline

Doom modeline.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :init
  (setq doom-modeline-icon nil)
  :config
  (doom-modeline-def-segment buffer-info-ignore-modified
    (let ((active (doom-modeline--active)))
      (concat
       (propertize " " 'face (if active 'mode-line 'mode-line-inactive))

       ;; buffer file name
       (when-let ((name (buffer-name)))
         (if active
             (propertize name 'face 'doom-modeline-buffer-file)
           (propertize name 'face 'mode-line-inactive))))))

  (doom-modeline-def-modeline 'my/simple-line
    '(bar buffer-info-ignore-modified checker)
    '(misc-info))
  (defun my/setup-custom-doom-modeline ()
    (doom-modeline-set-modeline 'my/simple-line 'default))
  (add-hook 'doom-modeline-mode-hook 'my/setup-custom-doom-modeline))
#+END_SRC

Display time in modeline.

#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
(setq display-time-string-forms
      '((propertize (format-time-string "%H:%M" now) 'face 'bold)))
(display-time-mode t)
#+END_SRC

** Title bar

Title bar matches theme.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist
             '(ns-appearance . dark))
#+END_SRC

Remove title bar icon and file name.

#+BEGIN_SRC emacs-lisp
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)
#+END_SRC

** Initial frame
*** Size

Sets the initial frame to fill the screen.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'toggle-frame-fullscreen)
#+END_SRC

*** Position

Sets the initial frame to be flush with the top left corner of the screen.

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(left . 0))
(add-to-list 'initial-frame-alist '(top . 0))
#+END_SRC
** Cursor shape

#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC

** Cursor only appears in current buffer

#+BEGIN_SRC emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+END_SRC

** Font

Sets font and font size.

#+BEGIN_SRC emacs-lisp
(set-default-font "Menlo 14")
#+END_SRC

** Enable visual line mode

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode)
#+END_SRC

* Text Manipulation
** Delete selected region when typing

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

** Only use spaces

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Tab width

Set tab width.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

** Contextual tab

Tab will now contextually indent or complete.

#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

** Flyspell

Turn spellcheck on, sets it to use aspell and british spelling.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (setq ispell-program-name "aspell"
    ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))
  (add-hook 'text-mode-hook #'flyspell-mode))
#+END_SRC

** Undo tree

[[https://www.emacswiki.org/emacs/UndoTree][Undo-tree]] enables conventional undo-redo behaviour.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :bind (("s-Z" . undo-tree-redo)
     ("s-z" . undo-tree-undo))
  :config
  (setq undo-tree-history-directory-alist
    `((".*" . ,temporary-file-directory)))
  (setq undo-tree-auto-save-history t))
#+END_SRC

** White space

[[https://www.emacswiki.org/emacs/WhiteSpace][whitespace]] cleans white space on save.

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :init
  (add-hook 'before-save-hook #'whitespace-cleanup))
#+END_SRC

** Sentence should end with only a full stop

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Back to indentation or beginning

#+BEGIN_SRC emacs-lisp
(defun my/back-to-indentation-or-beginning () (interactive)
   (if (= (point) (progn (back-to-indentation) (point)))
       (beginning-of-line)))

(global-set-key (kbd "C-a") 'my/back-to-indentation-or-beginning)
#+END_SRC

** Hungry delete

Makes backspace and C-d erase all consecutive white space in a given direction (instead of just one).

#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :config
  (global-hungry-delete-mode))
#+END_SRC

* Navigation
** Recent files

[[https://www.emacswiki.org/emacs/RecentFiles][Recentf]] is a minor mode that builds a list of recently opened files.

#+BEGIN_SRC emacs-lisp
(recentf-mode t)
#+END_SRC

** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] a light weight fuzzy search completion framework.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
       :diminish ivy-mode
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       :init
       (ivy-mode t))
#+END_SRC

** Swiper

[[https://github.com/abo-abo/swiper][Swiper]] an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind ("C-s" . swiper-isearch)
    ("s-f" . swiper-isearch))
#+END_SRC

** Counsel

[[https://github.com/abo-abo/swiper][Counsel]] provides versions of common Emacs commands that are customised to make the best use of ivy.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :init
  (counsel-mode t)
  :bind
  ("C-x p" . counsel-git)
  ("C-S-s" . counsel-git-grep))
#+END_SRC

* Project Management
** Magit

[[https://magit.vc/][Magit]] is a great interface for git projects.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
  (setq magit-completing-read-function 'ivy-completing-read)
  (setq magit-save-repository-buffers 'dontask)
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  :bind ("C-x g" . magit-status))
#+END_SRC

** Org mode
*** Defer Org

Defer org to speed up load time (if config hasn't changed).

#+BEGIN_SRC emacs-lisp
(use-package org
    :defer t)
#+END_SRC

*** Org babel/source blocks

Enables source blocks syntax highlights and makes the editing popup
window stay within the same window.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC

*** Auto tangle .org files in script folder

#+BEGIN_SRC emacs-lisp
(defun my/tangle-scripts ()
  (when-let ((file-name (buffer-file-name)))
    (when (string-match "^.*?/\.emacs\.d/scripts/.*\.org$" file-name)
      (org-babel-tangle-file file-name))))

(add-hook 'after-save-hook #'my/tangle-scripts)
#+END_SRC

*** Disable flycheck elisp checkdoc in org-mode src blocks

#+BEGIN_SRC emacs-lisp
(defun my/disable-fylcheck-in-org-src-block ()
  (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

(add-hook 'org-src-mode-hook 'my/disable-fylcheck-in-org-src-block)
#+END_SRC

* Programming
** General
*** Show line numbers

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

*** Company mode

[[https://github.com/company-mode/company-mode][Company]] is a text completion framework for Emacs. The name stands
for "complete anything". It uses pluggable back-ends and front-ends
to retrieve and display completion candidates.

#+BEGIN_SRC emacs-lisp
(use-package company
  :init
    (setq company-idle-delay 0.2)
    (global-company-mode)
  :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous)
              ("TAB" . company-complete-selection)))
#+END_SRC

*** Compilation buffers display ANSI

#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :config (progn
            (defun my/ansi-colorize-buffer ()
              (let ((inhibit-read-only t))
                (ansi-color-apply-on-region (point-min) (point-max))))
            (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)))
#+END_SRC

*** Aggressive Indent

[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]] automatically keeps things indented.

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :hook ((emacs-lisp-mode clojure-mode) . aggressive-indent-mode))
#+END_SRC

*** Smartparens

[[https://github.com/Fuco1/smartparens][Smartparens]] paredit for all the things.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  (progn
    (use-package smartparens-config
      :straight nil)
    (sp-use-smartparens-bindings)
    (show-smartparens-global-mode t)
    (setq sp-highlight-pair-overlay nil))
  :init
  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
  :bind (:map smartparens-mode-map
              ("C-(" . sp-backward-slurp-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("C-)" . sp-forward-slurp-sexp)
              ("C-}" . sp-forward-barf-sexp)))
#+END_SRC

*** Flycheck

[[https://github.com/flycheck/flycheck][Flycheck]] on-the-fly syntax checking extension.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode)
  (my/flycheck-use-line)
  ;; Change fringe indicator to be a circle
  (define-fringe-bitmap 'my-flycheck-fringe-indicator
    (vector #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000))

  (flycheck-define-error-level 'error
    :severity 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-error)

  (flycheck-define-error-level 'warning
    :severity 1
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-warning)

  (flycheck-define-error-level 'info
    :severity 0
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-info))
#+END_SRC

*** Yasnippet

[[https://github.com/joaotavora/yasnippet][yasnipet]] mode for code snippets.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
#+END_SRC

*** Auto Insert

Handles auto-inserting templates when creating new files.

#+BEGIN_SRC emacs-lisp
(use-package autoinsert
  :init
  (setq auto-insert-query nil
        auto-insert-alist nil
        auto-insert-directory (locate-user-emacs-file "templates"))
  :config
  (auto-insert-mode 1)
  (defun my/autoinsert-yas-expand ()
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))
  (define-auto-insert "\\.clj$" ["default_clj.clj" my/autoinsert-yas-expand])
  (define-auto-insert "\\test.clj$" ["default_test_clj.clj" my/autoinsert-yas-expand]))
#+END_SRC

** Sql

Toggle between up and down file if they exist (assumes files are in the same folder).

#+BEGIN_SRC emacs-lisp
(use-package sql
  :config
  (defun my/sql-find-up-or-down (file-name)
    (unless file-name (error "The current buffer is not visiting a file"))
    (if (string-suffix-p ".up" (file-name-sans-extension (file-name-nondirectory file-name)))
        (replace-regexp-in-string "\\.up\\." ".down." file-name)
      (replace-regexp-in-string "\\.down\\." ".up." file-name)))

  (defun my/sql-toggle-up-down ()
    (interactive)
    (-> (buffer-file-name)
        my/sql-find-up-or-down
        find-file))
  :bind (:map sql-mode-map
              ("M-g t" . my/sql-toggle-up-down)))
#+END_SRC

** Elisp
*** Dash

[[https://github.com/magnars/dash.el#--x-optional-form-rest-more][Dash]] a modern list api for Emacs (includes things like -> ->> macros).

#+BEGIN_SRC emacs-lisp
(use-package dash)
#+END_SRC

*** Edn

[[https://github.com/expez/edn.el][Edn]] is an emacs lisp library for reading and writing the data format edn.

#+BEGIN_SRC emacs-lisp
(use-package edn)
#+END_SRC

** Clojure
*** Clojure Mode & Inferior Lisp

#+BEGIN_SRC emacs-lisp
(defun my/clj-eval (edn)
  (-> (edn-print-string edn)
      lisp-eval-string))

(defun my/clj-symbol-at-point ()
  (with-syntax-table clojure-mode-syntax-table
    (symbol-at-point)))

(defun my/enable-repl-pprint ()
  (my/clj-eval '(clojure.main/repl :print (fn [x] (newline)
                                              (clojure.pprint/pprint x)))))

(defun my/on-first-prompt (output)
  (when (string-match "^[^=>]*[=>] *" output)
    (my/enable-repl-pprint)
    (remove-hook 'comint-output-filter-functions
                 'my/on-first-prompt)))

(defun my/try-to-open-clj-project-file (&optional clj-lisp-prog)
  (unless (get-buffer "*inferior-lisp*")
    (or (ignore-errors
          (find-file-existing (concat (counsel-locate-git-root) "project.clj"))
          (or (and clj-lisp-prog (setq inferior-lisp-program clj-lisp-prog))
              (setq inferior-lisp-program "lein repl")))
        (ignore-errors
          (find-file-existing (concat (counsel-locate-git-root) "deps.edn"))
          (setq inferior-lisp-program "clojure"))
        (setq inferior-lisp-program "clojure"))))

(defun my/clj-open-repl (&optional do-not-toggle-previous-buffer clj-lisp-prog)
  (interactive)
  (add-hook 'comint-output-filter-functions
            'my/on-first-prompt)
  (when (one-window-p)
    (split-window-right))
  (display-buffer-use-some-window (current-buffer) nil)
  (other-window 1)
  (previous-buffer)
  (if (and (not do-not-toggle-previous-buffer) (string= (buffer-name) "*inferior-lisp*"))
      (previous-buffer)
    (progn
      (next-buffer)
      (my/try-to-open-clj-project-file clj-lisp-prog)
      (inferior-lisp inferior-lisp-program)
      (comint-show-maximum-output)))
  (other-window 1))

(defun my/kill-inferior-lisp-buffer ()
  (when (get-buffer "*inferior-lisp*")
    (kill-buffer "*inferior-lisp*")))

(defun my/start-repl (clj-lisp-prog)
  (my/kill-inferior-lisp-buffer)
  (my/clj-open-repl t clj-lisp-prog))

(defun heroku-production-repl ()
  (interactive)
  (my/start-repl "heroku run lein repl --remote production"))
(defun heroku-staging-repl ()
  (interactive)
  (my/start-repl "heroku run lein repl --remote staging"))

(defun my/clj-doc-for-symbol ()
  (interactive)
  (my/clj-open-repl t)
  (my/clj-eval `(clojure.repl/doc ,(my/clj-symbol-at-point))))

(defun my/clj-source-for-symbol ()
  (interactive)
  (my/clj-open-repl t)
  (my/clj-eval `(clojure.repl/source ,(my/clj-symbol-at-point))))

(defun my/clj-javadoc-for-symbol ()
  (interactive)
  (my/clj-open-repl t)
  (my/clj-eval `(clojure.java.javadoc/javadoc ,(my/clj-symbol-at-point))))

(defun my/clj-apply-f-to-ns-and-return-to-point (f)
  (save-buffer)
  (let ((current-point (point)))
    (goto-char (point-min))
    (let ((ns-idx (re-search-forward clojure-namespace-name-regex nil t)))
      (when ns-idx
        (goto-char ns-idx)
        (let ((sym (my/clj-symbol-at-point)))
          (funcall f sym))))
    (goto-char current-point)))

(defun my/clj-load-current-ns ()
  (interactive)
  (my/clj-open-repl t)
  (my/clj-apply-f-to-ns-and-return-to-point
   (lambda (sym)
     (my/clj-eval `(do (require ',sym :reload)
                       (in-ns ',sym))))))

(defun my/clj-eval-buffer ()
  (interactive)
  (my/clj-open-repl t)
  (lisp-eval-region (point-min) (point-max)))

(defun my/clj-run-test-for-current-ns ()
  (interactive)
  (my/clj-open-repl t)
  (my/clj-apply-f-to-ns-and-return-to-point
   (lambda (sym)
     (let* ((sym-name (symbol-name sym))
            (ns (make-symbol
                 (if (string-suffix-p "test" sym-name)
                     (replace-regexp-in-string "-test" "" sym-name)
                   sym-name)))
            (test-ns (make-symbol
                      (if (string-suffix-p "test" sym-name)
                          sym-name
                        (concat sym-name "-test")))))
       (my/clj-eval `(do (require ',ns :reload)
                         (require ',test-ns :reload)
                         (clojure.test/run-tests ',test-ns)))))))

(defun my/clj-comment-form ()
  (interactive)
  (let ((bounds (bounds-of-thing-at-point 'sexp)))
    (if bounds
        (progn (goto-char (car bounds))
               (search-backward "\"" (- (point) 1) t))
      (clojure-backward-logical-sexp))
    (if (search-forward "#_" (+ (point) 2) t)
        (delete-char -2)
      (insert "#_")
      (backward-char 2))))

(defun my/clj-apropos ()
  (interactive)
  (my/clj-open-repl t)
  (->> (read-string "Apropos (regex):")
       (format "(clojure.repl/apropos #\"%s\")")
       lisp-eval-string))

(defun my/clj-find-doc ()
  (interactive)
  (my/clj-open-repl t)
  (->> (read-string "Find Doc (regex):")
       (format "(clojure.repl/find-doc #\"%s\")")
       lisp-eval-string))

(defun my/clj-find-implementation-or-test (file-name)
  (unless file-name (error "The current buffer is not visiting a file"))
  (if (string-suffix-p "test" (file-name-sans-extension
                               (file-name-nondirectory file-name)))
      (replace-regexp-in-string
       "_test" "" (replace-regexp-in-string
                   "test/" "src/" file-name))
    (replace-regexp-in-string
     "src/" "test/" (replace-regexp-in-string ".clj" "_test.clj" file-name))))

(defun my/clj-toggle-between-implementation-and-test ()
  (interactive)
  (-> (buffer-file-name)
      my/clj-find-implementation-or-test
      find-file))

(defun my/clj-compliment-completion (prefix)
  (edn-print-string
   `(do (require '[compliment.core])
        (->> (compliment.core/completions ,prefix)
             (map :candidate)))))

(defun my/check-first-item-string (list)
  (when (stringp (car list))
    list))

(defun my/clj-completions (prefix)
  (let ((proc (inferior-lisp-proc))
        (output-buffer "*my/clj-completions*"))
    (save-excursion
      (set-buffer (get-buffer-create output-buffer))
      (erase-buffer)
      (comint-redirect-send-command-to-process
       (my/clj-compliment-completion prefix) output-buffer proc nil t)
      (set-buffer (process-buffer proc))
      (while (null comint-redirect-completed)
        (accept-process-output nil 1))
      (set-buffer output-buffer)
      (-> (buffer-substring-no-properties (point-min) (point-max))
          string-trim
          read
          my/check-first-item-string))))

(defun my/clj-completion-backend (command &optional arg &rest ignored)
  (interactive (list 'interactive))
  (cl-case command
    (interactive (company-begin-backend 'my/clj-completion-backend))
    (prefix (and (eq major-mode 'clojure-mode)
                 (comint-check-proc "*inferior-lisp*")
                 (company-grab-symbol)))
    (candidates (my/clj-completions arg))
    (sorted t)))

(defun my/lisp-eval-last-sexp ()
  (interactive)
  (my/clj-open-repl t)
  (lisp-eval-last-sexp))

(use-package clojure-mode
  :defer t
  :hook ((clojure-mode . (lambda ()
                           (set (make-local-variable 'company-backends)
                                (list
                                 (list 'my/clj-completion-backend
                                       'company-dabbrev-code))))))
  :bind (:map clojure-mode-map
              ("C-c C-a" . my/clj-apropos)
              ("C-c C-z" . my/clj-open-repl)
              ("C-c C-d" . my/clj-doc-for-symbol)
              ("C-c C-s" . my/clj-source-for-symbol)
              ("C-c C-j" . my/clj-javadoc-for-symbol)
              ("C-c C-f" . my/clj-find-doc)
              ("C-c C-l" . my/clj-load-current-ns)
              ("C-c C-b" . my/clj-eval-buffer)
              ("M-g t"   . my/clj-toggle-between-implementation-and-test)
              ("C-c C-t" . my/clj-run-test-for-current-ns)
              ("C-x C-e" . my/lisp-eval-last-sexp)
              ("M-;"     . my/clj-comment-form)))

(add-hook 'inferior-lisp-mode-hook (lambda()
                                     (font-lock-add-keywords 'inferior-lisp-mode
                                                             clojure-font-lock-keywords 'end)))

(defun my/empty-file ()
  (save-excursion
    (save-match-data
      (goto-char (point-min))
      (eobp))))

(defun my/clj-before-save ()
  (when (eq major-mode 'clojure-mode)
    (clojure-align (point-min) (point-max))))

(add-hook 'before-save-hook 'my/clj-before-save)

(defun my/require-test-src-file ()
  (concat "["
          (->> (clojure-expected-ns)
               (replace-regexp-in-string "-test" ""))
          " :as "
          (->> (buffer-name)
               file-name-sans-extension
               (replace-regexp-in-string "_" "-")
               (replace-regexp-in-string "-test" ""))
          "]"))
#+END_SRC

*** Flycheck Joker

[[https://github.com/candid82/flycheck-joker][flycheck-joker]] is a clojure linter.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-joker)
#+END_SRC

** Http

[[https://github.com/pashky/restclient.el][restclient]] a tool for manually exploring and testing HTTP REST webservices.

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :defer t
  :mode ("\\.\\(http\\|rest\\)$" . restclient-mode))
#+END_SRC

** Javascript
*** Json mode

[[Major mode for editing JSON file][Json Mode]] is a major mode for editing JSON file.

#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC

*** rjsx-mode

[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]] handles files js/jsx.

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :config
  (setq indent-tabs-mode nil)
  (setq js-indent-level 2)
  (setq js2-basic-offset 2)
  (setq js2-strict-missing-semi-warning nil)
  (setq js2-mode-show-parse-errors nil)
  (setq js2-strict-trailing-comma-warning nil)
  (setq js2-strict-inconsistent-return-warning nil)
  (add-to-list 'auto-mode-alist '(".*\\.js\\'" . rjsx-mode)))
#+END_SRC

*** Add node modules path

[[https://github.com/codesuki/add-node-modules-path][add-node-modules-path]] allows Emacs to find project based installs of e.g. eslint.

#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :hook (rjsx-mode . add-node-modules-path))
#+END_SRC

*** Flycheck

Flycheck checks Javascript with one of javascript-eslint, javascript-jshint
or javascript-gjslint, and then with javascript-jscs.

Disable jshint.

#+BEGIN_SRC emacs-lisp
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))
#+END_SRC

Use eslint in rjsx-mode.

#+BEGIN_SRC emacs-lisp
(flycheck-add-mode 'javascript-eslint 'rjsx-mode)
#+END_SRC

* Misc
** Epub Reader

[[https://github.com/wasamasa/nov.el][nov.el]] an epub reader for emacs.

#+BEGIN_SRC emacs-lisp
(use-package nov
  :defer t
  :init
  (defun my/nov-font-setup ()
  (face-remap-add-relative 'variable-pitch
                            :family "Menlo"
                            :height 1.1)
  (nov-render-document))
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  :config
  (setq nov-text-width 80)
  :hook (nov-mode . my/nov-font-setup))
#+END_SRC

** Music

[[https://www.gnu.org/software/emms/][emms]] music player.

#+BEGIN_SRC emacs-lisp
(use-package emms
  :defer t
  :config
  (emms-standard)
  (emms-default-players)
  (emms-mode-line-disable)
  (emms-playing-time-disable-display)
  (setq emms-repeat-playlist t)
  (setq emms-source-file-default-directory "~/Documents/music"))
#+END_SRC

** Markdown Mode

[[https://github.com/jrblevin/markdown-mode][Markdown mode]] for rendering markdown.

#+BEGIN_SRC emacs-lisp
(defun my/clj-open-md-block-repl ()
  (interactive)
  (setq inferior-lisp-program
        "clojure -Sdeps {:deps{compliment{:mvn/version\"0.3.8\"}}}")
  (my/clj-open-repl))

(use-package markdown-mode
  :defer t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config (markdown-toggle-fontify-code-blocks-natively)
  :bind (:map markdown-mode-map
              ("C-c C-a" . my/clj-apropos)
              ("C-c C-z" . my/clj-open-md-block-repl)
              ("C-c C-d" . my/clj-doc-for-symbol)
              ("C-c C-s" . my/clj-source-for-symbol)
              ("C-c C-f" . my/clj-find-doc)
              ("C-x C-e" . my/lisp-eval-last-sexp)))
#+END_SRC
