# C-c ' (org-edit-special) toggles org-edit-src-code on src blocks.
# M-x elisp-index-search to search elisp manual
# M-x emacs-index-search to search emacs manual

* Defaults
** Exec-path-from-shell

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] ensures environment variables inside GUI Emacs look the same as in the user's shell on OSX.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Start emacs server

Open file in existing emacs window (rather than a new session) when clicking on a file in finder.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

** Super save

[[https://github.com/bbatsov/super-save][Super-save]] auto-saves your buffers, when certain events happen - e.g. you
switch between buffers, an Emacs frame loses focus, etc.

#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish super-save-mode
  :config
  (super-save-mode t)
  (setq save-silently t))
#+END_SRC

** Update Packages

#+BEGIN_SRC emacs-lisp
(defun my/update-emacs-packages ()
  (interactive)
  (straight-pull-all)
  (straight-freeze-versions))
#+END_SRC

** Open config

#+BEGIN_SRC emacs-lisp
(defun my/config ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
#+END_SRC

** Reloading config

#+BEGIN_SRC emacs-lisp
(defun my/reload-config ()
  (interactive)
    (save-buffer)
    (straight-transaction
      (load-file  "~/.emacs.d/init.el")))
#+END_SRC

** Turn off alarms completely

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Answering 'y' or 'n'

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable dialog boxes

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC

** Disable all backups

That's what git is for.

#+BEGIN_SRC emacs-lisp
(setq-default  auto-save-default nil
               create-lockfiles nil
               history-length 500
               make-backup-files nil)
#+END_SRC

** Bookmarks
*** Save on any change

(setq bookmark-save-flag 1)

*** Stored in emacs-sync

#+BEGIN_SRC emacs-lisp
(setq bookmark-default-file "~/.emacs.d/emacs-sync/bookmarks")
#+END_SRC

** Kill current buffer rather than bringing up list

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

** Don't ask for confirmation when opening symlinked file

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t )
#+END_SRC

** Warn when opening large files

Warn when opening files bigger than 100MB.

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** Use Utf-8 encoding

#+BEGIN_SRC emacs-lisp
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system        'utf-8)
(set-terminal-coding-system  'utf-8)
(set-keyboard-coding-system  'utf-8)
(set-selection-coding-system 'utf-8)
(setq locale-coding-system   'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
#+END_SRC

** Display Help in same window

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
       '("*Help*" display-buffer-same-window))
#+END_SRC

** Switch window focus on split

Switch window focus on split.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x 2")
                (lambda () (interactive)(split-window-below) (other-window 1)))
(global-set-key (kbd "C-x 3")
                (lambda () (interactive)(split-window-right) (other-window 1)))
#+END_SRC

** Dired
*** Dired auto-revert

Ensures Dired file lists are refreshed when files are created/deleted/renamed.
Also hides auto revert message.

#+BEGIN_SRC emacs-lisp
(setq dired-auto-revert-buffer t)
#+END_SRC

*** Dired hide details by default

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

*** Enable find alternate file

Bind return to alternate file, so that dired reuses same buffer.

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    :bind (:map dired-mode-map
                ("RET" . dired-find-alternate-file)
                ("h" . dired-previous-line)
                ("p" . describe-mode)))
#+END_SRC

*** WDired

WDired (writable dired) can be accessed by making the dired buffer writable with the binding C-x C-q. Any change you make to the buffer will remain unchanged until you commit them by typing C-c C-c. To cancel the changes and revert to the original state you can type C-c k.

The feature bellow force confirmation in the case of potential overwrites caused by rename.

#+BEGIN_SRC emacs-lisp
(setq wdired-confirm-overwrite t)
#+END_SRC

** Ask for confirmation when closing emacs

Ask for confirmation when closing emacs.

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Show keystrokes ASAP

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1)
#+END_SRC

** Disable mouse

Disables mouse.

#+BEGIN_SRC emacs-lisp
(use-package disable-mouse
  :config
  (global-disable-mouse-mode))
#+END_SRC

** Disable all arrow keys

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<left>"))
(global-unset-key (kbd "<right>"))
(global-unset-key (kbd "<up>"))
(global-unset-key (kbd "<down>"))
(global-unset-key (kbd "<C-left>"))
(global-unset-key (kbd "<C-right>"))
(global-unset-key (kbd "<C-up>"))
(global-unset-key (kbd "<C-down>"))
(global-unset-key (kbd "<M-left>"))
(global-unset-key (kbd "<M-right>"))
(global-unset-key (kbd "<M-up>"))
(global-unset-key (kbd "<M-down>"))
#+END_SRC

** Disable return key

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<return>") 'ignore)
#+END_SRC

** Disable backspace key

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<backspace>") 'ignore)
#+END_SRC

** Default initial buffer to tasks.org file

#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice "~/.emacs.d/emacs-sync/org/tasks.org")
(setq initial-scratch-message "")
#+END_SRC

** Change Gravity

Makes recenter go to top first.

#+BEGIN_SRC emacs-lisp
(setq recenter-positions '(top middle bottom))
#+END_SRC

** Mark

Allows you to keep hitting C-Space after that initial C-u C-Space to pop marks.

#+BEGIN_SRC emacs-lisp
(setq set-mark-command-repeat-pop 't)
#+END_SRC

** OSX cmd key

Bind cmd (super) key to control

#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'control)
#+END_SRC

** Global key bindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-j") 'newline)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "C-x f") 'counsel-find-file)
(global-set-key (kbd "C-x C-d") 'dired)
(global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)
(global-set-key (kbd "C-w") 'my/smart-kill)
(global-set-key (kbd "C-t") 'my/smart-transpose)
(global-set-key (kbd "M-c") 'my/org-capture-task)
(global-set-key (kbd "C-v") 'yank)
(global-set-key (kbd "C-o") 'other-window)
(global-set-key (kbd "\"") 'my/smart-quote)
#+END_SRC

** Swap ; and :

Colons are used a lot more than semi-colons in lisp.

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd ";") (kbd ":"))
(define-key key-translation-map (kbd ":") (kbd ";"))
#+END_SRC

** Swap () and []

() are used a lot more than [] in lisp.

#+BEGIN_SRC emacs-lisp
(define-key input-decode-map [?\C-\[] (kbd "<C-[>"))
(global-unset-key (kbd "C-]"))

(define-key key-translation-map (kbd "(") (kbd "["))
(define-key key-translation-map (kbd "[") (kbd "("))
(define-key key-translation-map (kbd ")") (kbd "]"))
(define-key key-translation-map (kbd "]") (kbd ")"))
#+END_SRC

** Swap " and '

Double quotes are used a lot more than single quotes in lisp.

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "'") (kbd "\""))
(define-key key-translation-map (kbd "\"") (kbd "'"))
#+END_SRC

** Swap C-m and C-j

I find C-j more ergonomic that C-m as it's on the home row.

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "C-j") (kbd "C-m"))
(define-key key-translation-map (kbd "C-m") (kbd "C-j"))
#+END_SRC

** Swap C-p and C-h

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "C-h") (kbd "C-p"))
(define-key key-translation-map (kbd "C-p") (kbd "C-h"))
#+END_SRC

** Swap M-p and M-h

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "M-h") (kbd "M-p"))
(define-key key-translation-map (kbd "M-p") (kbd "M-h"))
#+END_SRC

* Appearance
** Menu, tool and scroll bars

Hide menu bar.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

Hide scroll and tool bar when not in terminal mode.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (scroll-bar-mode -1)
  (tool-bar-mode -1))
#+END_SRC

** Splash screen

Disables default splash screen.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t
    inhibit-startup-message t
    inhibit-startup-echo-area-message t)
#+END_SRC

** Theme
*** Doom

[[doom-spacegrey][Doom]] themes. To find out the name of the face you want to customise: M-x cutomize-face and then search through the list of faces.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq my/dark-theme 'doom-solarized-dark)
  (setq my/light-theme 'doom-solarized-light)
  (setq my/active-theme my/light-theme)
  (load-theme my/active-theme t)
  (defun my/customise-theme ()
    (doom-themes-set-faces
      my/active-theme
      '(cursor :background magenta)
      '(sp-show-pair-match-face :foreground magenta :weight 'bold)
      '(line-number-current-line :foreground fg :weight 'bold)
      '(font-lock-type-face :foreground green)
      '(font-lock-keyword-face :foreground fg)
      '(font-lock-variable-name-face :foreground blue)
      '(font-lock-function-name-face :foreground blue)
      '(font-lock-constant-face :foreground violet)
      '(font-lock-builtin-face :foreground violet)
      ;; modeline
      '(doom-modeline-bar :foreground modeline-bg)
      ;; org
      '(org-level-1 :foreground blue :height 1.2 :weight 'ultra-bold)
      '(org-level-2 :foreground violet :height 1.0 :weight 'bold)
      '(org-level-3 :foreground teal :height 1.0 :weight 'bold)
      ;; ivy
      '(ivy-current-match
        :foreground magenta
        :weight 'bold
        :background nil)
      '(ivy-minibuffer-match-face-1
        :foreground nil
        :weight 'light
        :background nil)
      '(ivy-minibuffer-match-face-2
        :inherit 'ivy-minibuffer-match-face-1
        :foreground violet
        :weight 'semi-bold
        :background nil)
      '(ivy-minibuffer-match-face-3
        :inherit 'ivy-minibuffer-match-face-2
        :foreground green
        :weight 'semi-bold
        :background nil)
      '(ivy-minibuffer-match-face-4
        :inherit 'ivy-minibuffer-match-face-2
        :foreground yellow
        :weight 'semi-bold
        :background nil)
      ;; emms
      '(emms-playlist-track-face :foreground fg)
      '(emms-playlist-selected-face :foreground highlight)
      ;; markdown
      '(markdown-header-face :foreground blue :weight 'bold)
      '(markdown-metadata-key-face :foreground violet)
      ;; eww
      '(eww-invalid-certificate :foreground red :weight 'bold)
      '(eww-valid-certificate :foreground green :weight 'bold)
      '(eww-form-checkbox :foreground blue :box blue)
      '(eww-form-file :foreground blue :box blue)
      '(eww-form-select :foreground bg :background blue :box blue)
      '(eww-form-submit :foreground blue :box blue)
      '(eww-form-text :foreground fg :box violet)
      '(eww-form-textarea :foreground fg :box violet)))
  (my/customise-theme))
#+END_SRC

*** Hook for after theme load

#+BEGIN_SRC emacs-lisp
(defun my/flycheck-use-line ()
  (set-face-attribute 'flycheck-error nil
                      :underline `(:style line :color ,(doom-color 'red)))
  (set-face-attribute 'flycheck-warning nil
                      :underline `(:style line :color ,(doom-color 'yellow)))
  (set-face-attribute 'flycheck-info nil
                      :underline `(:style line :color ,(doom-color 'green)))
  (set-face-attribute 'flyspell-incorrect nil
                      :underline `(:style line :color ,(doom-color 'red))
                      :inherit 'unspecified)
  (set-face-attribute 'flyspell-duplicate nil
                      :underline `(:style line :color ,(doom-color 'yellow))
                      :inherit 'unspecified))

(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
   (run-hooks 'after-load-theme-hook))

(add-hook
 'after-load-theme-hook
 'my/flycheck-use-line)
#+END_SRC

*** Toggle Dark/light Theme

#+BEGIN_SRC emacs-lisp
(defun my/toggle-theme ()
   (interactive)
   (disable-theme my/active-theme)
   (if (eq my/active-theme my/light-theme)
    (setq my/active-theme my/dark-theme)
    (setq my/active-theme my/light-theme))
   (load-theme my/active-theme t)
   (my/customise-theme))
#+END_SRC

** Modeline

Doom modeline.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :init
  (setq doom-modeline-icon nil)
  :config
  (doom-modeline-def-segment buffer-info-ignore-modified
    (let ((active (doom-modeline--active)))
      (concat
       (propertize " " 'face (if active 'mode-line 'mode-line-inactive))

       ;; buffer file name
       (when-let ((name (buffer-name)))
         (if active
             (propertize name 'face 'doom-modeline-buffer-file)
           (propertize name 'face 'mode-line-inactive))))))

  (doom-modeline-def-modeline 'my/simple-line
    '(bar buffer-info-ignore-modified checker)
    '(misc-info))
  (defun my/setup-custom-doom-modeline ()
    (doom-modeline-set-modeline 'my/simple-line 'default))
  (add-hook 'doom-modeline-mode-hook 'my/setup-custom-doom-modeline))
#+END_SRC

Display time in modeline.

#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
(setq display-time-string-forms
      '((propertize (format-time-string "%H:%M" now) 'face 'bold)))
(display-time-mode t)
#+END_SRC

** Title bar

Title bar matches theme.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist
             '(ns-appearance . dark))
#+END_SRC

Remove title bar icon and file name.

#+BEGIN_SRC emacs-lisp
(setq ns-use-proxy-icon nil)
(setq frame-title-format nil)
#+END_SRC

** Initial frame
*** Size

Sets the initial frame to fill the screen.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'toggle-frame-fullscreen)
#+END_SRC

*** Position

Sets the initial frame to be flush with the top left corner of the screen.

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(left . 0))
(add-to-list 'initial-frame-alist '(top . 0))
#+END_SRC

** Cursor

Cursor only appears in current buffer.

#+BEGIN_SRC emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+END_SRC

Unbind suspend-frame (this would cause the cursor to disappear if you pressed C-x C-z by mistake).

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-x C-z"))
#+END_SRC

** Font

Sets font and font size.

#+BEGIN_SRC emacs-lisp
(set-default-font "Menlo 14")
#+END_SRC

** Enable visual line mode

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode)
#+END_SRC

* Text Manipulation
** Delete selected region when typing

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

** Only use spaces

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Tab width

Set tab width.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

** Contextual tab

Tab will now contextually indent or complete.

#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

** Flyspell

Turn spellcheck on, sets it to use aspell and british spelling.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (setq ispell-program-name "aspell"
    ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))
  (setq ispell-personal-dictionary "~/.emacs.d/.aspell.en.pws")
  (add-hook 'text-mode-hook #'flyspell-mode))
#+END_SRC

** White space

[[https://www.emacswiki.org/emacs/WhiteSpace][whitespace]] cleans white space on save.

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :init
  (add-hook 'before-save-hook #'whitespace-cleanup))
#+END_SRC

** Sentence should end with only a full stop

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Back to indentation or beginning

#+BEGIN_SRC emacs-lisp
(defun my/back-to-indentation-or-beginning () (interactive)
   (if (= (point) (progn (back-to-indentation) (point)))
       (beginning-of-line)))

(global-set-key (kbd "C-a") 'my/back-to-indentation-or-beginning)
#+END_SRC

** Hungry delete

Makes backspace and C-d erase all consecutive white space in a given direction (instead of just one).

#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :config
  (global-hungry-delete-mode))
#+END_SRC

* Navigation
** Recent files

[[https://www.emacswiki.org/emacs/RecentFiles][Recentf]] is a minor mode that builds a list of recently opened files.

#+BEGIN_SRC emacs-lisp
(recentf-mode t)
#+END_SRC

** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] a light weight fuzzy search completion framework.

#+BEGIN_SRC emacs-lisp
(use-package ivy
       :diminish ivy-mode
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (ivy-configure 'counsel-M-x :sort-fn #'ivy-string<)
       :bind
       (:map ivy-mode-map
              ("C-v" . yank)
              ("C-o" . other-window))
       :init
       (ivy-mode t))
#+END_SRC

** Swiper

[[https://github.com/abo-abo/swiper][Swiper]] an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind ("C-s" . swiper-isearch)
  ("C-r" . swiper-isearch-backward))
#+END_SRC

** Counsel

[[https://github.com/abo-abo/swiper][Counsel]] provides versions of common Emacs commands that are customised to make the best use of ivy.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :init
  (counsel-mode t)
  :bind
  ("C-x p" . counsel-git)
  ("C-h" . counsel-git)
  ("C-M-s" . counsel-git-grep))
#+END_SRC

* Project Management
** Magit

[[https://magit.vc/][Magit]] is a great interface for git projects.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
  (setq magit-completing-read-function 'ivy-completing-read)
  (setq magit-save-repository-buffers 'dontask)
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (setq magit-diff-refine-hunk 'all)
  (setq magit-diff-refine-ignore-whitespace t)
  :bind (("C-x g" . magit-status)
         :map magit-status-mode-map
         ("h" . magit-section-backward)
         :map magit-log-mode-map
         ("h" . magit-section-backward)
         :map magit-diff-mode-map
         ("h" . magit-section-backward)))
#+END_SRC

** Org mode
*** Org babel/source blocks

Enables source blocks syntax highlights and makes the editing popup
window stay within the same window.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC

*** Auto tangle .org files in script folder

#+BEGIN_SRC emacs-lisp
(defun my/tangle-scripts ()
  (when-let ((file-name (buffer-file-name)))
    (when (string-match "^.*?/\.emacs\.d/scripts/.*\.org$" file-name)
      (org-babel-tangle-file file-name))))

(add-hook 'after-save-hook #'my/tangle-scripts)
#+END_SRC

*** Disable flycheck elisp checkdoc in org-mode src blocks

#+BEGIN_SRC emacs-lisp
(defun my/disable-fylcheck-in-org-src-block ()
  (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

(add-hook 'org-src-mode-hook 'my/disable-fylcheck-in-org-src-block)
#+END_SRC

*** Org todo sort

Sort sections by TODO.

#+BEGIN_SRC emacs-lisp
(defun my/org-todo-sort ()
  (interactive)
  (ignore-errors (outline-up-heading 10))
  (org-sort-entries nil ?o)
  (org-cycle)
  (org-cycle))
#+END_SRC

*** Org Capture

Set default org capture directory.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file  "~/.emacs.d/emacs-sync/org/tasks.org")
#+END_SRC

Create org capture task template without asking.

#+BEGIN_SRC emacs-lisp
(defun my/org-capture-task ()
  (interactive)
  "Capture a TODO item."
  (org-capture nil "t"))
#+END_SRC

** Simple Pomodoro Timer

#+BEGIN_SRC emacs-lisp
(defvar my/pomodoro-timer nil)

(defun my/pomodoro-finished-alert ()
  (setq my/pomodoro-timer nil)
  (my/toggle-theme))

(defun my/start-pomodoro-timer ()
  (interactive)
  (if my/pomodoro-timer
     (message "Pomodoro already started!")
   (setq my/pomodoro-timer (run-at-time "25 mins" nil 'my/pomodoro-finished-alert))
   (my/toggle-theme)
   (message "Pomodoro started!")))

(defun my/stop-pomodoro-timer ()
  (interactive)
  (when  my/pomodoro-timer
    (cancel-timer my/pomodoro-timer)
    (my/toggle-theme)
    (setq my/pomodoro-timer nil))
  (message "Pomodoro stopped!"))
#+END_SRC

* Programming
** General
*** Company mode

[[https://github.com/company-mode/company-mode][Company]] is a text completion framework for Emacs. The name stands
for "complete anything". It uses pluggable back-ends and front-ends
to retrieve and display completion candidates.

#+BEGIN_SRC emacs-lisp
(use-package company
  :init
    (setq company-idle-delay 0.2)
    (global-company-mode)
  :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-h" . company-select-previous)
              ("TAB" . company-complete-selection)
              ("C-w" . my/smart-kill)))
#+END_SRC

*** Compilation buffers display ANSI

#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :config (progn
            (defun my/ansi-colorize-buffer ()
              (let ((inhibit-read-only t))
                (ansi-color-apply-on-region (point-min) (point-max))))
            (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)))
#+END_SRC

*** Aggressive Indent

[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]] automatically keeps things indented.

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :hook ((emacs-lisp-mode clojure-mode) . aggressive-indent-mode))
#+END_SRC

*** Smartparens

[[https://github.com/Fuco1/smartparens][Smartparens]] paredit for all the things.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  (progn
    (use-package smartparens-config
      :straight nil)
    (sp-use-smartparens-bindings)
    (define-key smartparens-mode-map (kbd "C-]") 'sp-forward-slurp-sexp)
    (show-smartparens-global-mode t)
    (setq sp-highlight-pair-overlay nil))
  :init
  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
  :bind (:map smartparens-mode-map
              ("<C-[>" . sp-backward-slurp-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("C-}" . sp-forward-barf-sexp)
              ("C-M-h" . sp-previous-sexp)
              (")" . sp-backward-unwrap-sexp)))
#+END_SRC

*** Flycheck

[[https://github.com/flycheck/flycheck][Flycheck]] on-the-fly syntax checking extension.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (global-flycheck-mode)
  (my/flycheck-use-line)
  ;; Change fringe indicator to be a circle
  (define-fringe-bitmap 'my-flycheck-fringe-indicator
    (vector #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b11111111
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000))

  (flycheck-define-error-level 'error
    :severity 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-error)

  (flycheck-define-error-level 'warning
    :severity 1
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-warning)

  (flycheck-define-error-level 'info
    :severity 0
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-info))
#+END_SRC

*** Yasnippet

[[https://github.com/joaotavora/yasnippet][yasnipet]] mode for code snippets.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
#+END_SRC

*** Auto Insert

Handles auto-inserting templates when creating new files.

#+BEGIN_SRC emacs-lisp
(use-package autoinsert
  :init
  (setq auto-insert-query nil
        auto-insert-alist nil
        auto-insert-directory (locate-user-emacs-file "templates"))
  :config
  (auto-insert-mode 1)
  (defun my/autoinsert-yas-expand ()
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))
  (define-auto-insert "\\.clj$" ["default_clj.clj" my/autoinsert-yas-expand])
  (define-auto-insert "\\test.clj$" ["default_test_clj.clj" my/autoinsert-yas-expand])
  (define-auto-insert "deps.edn$" ["default_deps.edn" my/autoinsert-yas-expand])
  (define-auto-insert ".gitignore" ["default.gitignore" my/autoinsert-yas-expand]))
#+END_SRC

*** Lisp mode

#+BEGIN_SRC emacs-lisp
(use-package inf-lisp
 :bind (:map inferior-lisp-mode-map
        ("M-h" . comint-previous-input)))
#+END_SRC

*** Rainbow mode

Highlights hex colours.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+END_SRC

*** Highlight current smart kill region

Highlights the current symbol.

#+BEGIN_SRC emacs-lisp
(add-hook 'post-command-hook 'my/hl-current-kill-region-overlay-hook)
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
(use-package eshell
 :init
 ;; Eshell starts out defining its map as nil and then only sets it to a keymap
 ;; locally later so :bind won't work
 (add-hook 'eshell-mode-hook
          (lambda ()
             (define-key eshell-mode-map (kbd "M-h") 'eshell-previous-matching-input-from-input))))
#+END_SRC

** Sql

Toggle between up and down file if they exist (assumes files are in the same folder).

#+BEGIN_SRC emacs-lisp
(use-package sql
  :config
  (defun my/sql-find-up-or-down (file-name)
    (unless file-name (error "The current buffer is not visiting a file"))
    (if (string-suffix-p ".up" (file-name-sans-extension (file-name-nondirectory file-name)))
        (replace-regexp-in-string "\\.up\\." ".down." file-name)
      (replace-regexp-in-string "\\.down\\." ".up." file-name)))

  (defun my/sql-toggle-up-down ()
    (interactive)
    (-> (buffer-file-name)
        my/sql-find-up-or-down
        find-file))
  :bind (:map sql-mode-map
              ("M-g t" . my/sql-toggle-up-down)
         :map sql-interactive-mode-map
              ("M-h" . comint-previous-input)))
#+END_SRC

** Elisp
*** Show docs for symbol at point

#+BEGIN_SRC emacs-lisp
(defun my/docs-for-elisp-symbol-at-point ()
  "Show docs for elisp symbol at point."
  (interactive)
  (describe-function (symbol-at-point)))
#+END_SRC

*** Elisp mode bindings

#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :straight nil
  :config
  (progn
    (defun my/wrap-if-sexp ()
      (interactive)
      (if (or (symbol-at-point) (sexp-at-point))
          (my/wrap-with-parens)
        (my/insert-pair "()"))))
  :bind (:map emacs-lisp-mode-map
              ("(" . my/wrap-if-sexp)
              ("C-c C-d" . my/docs-for-elisp-symbol-at-point)
              (";" . my/insert-double-semicolon)))
#+END_SRC

*** Dash

[[https://github.com/magnars/dash.el#--x-optional-form-rest-more][Dash]] a modern list api for Emacs (includes things like -> ->> macros).

#+BEGIN_SRC emacs-lisp
(use-package dash)
#+END_SRC

*** Edn

[[https://github.com/expez/edn.el][Edn]] is an emacs lisp library for reading and writing the data format edn.

#+BEGIN_SRC emacs-lisp
(use-package edn)
#+END_SRC

** Clojure
*** Clojure Mode & Inferior Lisp

#+BEGIN_SRC emacs-lisp
(load-file ".emacs.d/clj.el")
(use-package clj :straight nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :defer t
  :hook ((clojure-mode . (lambda ()
                           (set (make-local-variable 'company-backends)
                                (list
                                 (list 'my/clj-completion-backend
                                       'company-dabbrev-code))))))
  :bind (:map clojure-mode-map
              ("C-c C-a" . my/clj-apropos)
              ("C-c C-z" . my/clj-open-repl)
              ("C-c C-d" . my/clj-doc-for-symbol)
              ("C-c C-s" . my/clj-source-for-symbol)
              ("C-c C-j" . my/clj-javadoc-for-symbol)
              ("C-c C-f" . my/clj-find-doc)
              ("C-c C-l" . my/clj-load-current-ns)
              ("C-c C-b" . my/clj-eval-buffer)
              ("M-g t"   . my/clj-toggle-between-implementation-and-test)
              ("C-c C-t n" . my/clj-run-ns-tests)
              ("C-c C-t C-n" . my/clj-run-ns-tests)
              ("C-c C-t p" . my/clj-run-project-tests)
              ("C-c C-t C-p" . my/clj-run-project-tests)
              ("C-x C-e" . my/clj-eval-last-sexp-with-ns)
              ("M-;" . my/clj-comment-form)
              ("M-." . my/clj-jump-to-symbol)
              ("M-," . my/clj-jump-back)
              ("[" . my/wrap-with-brackets)
              ("{" . my/wrap-with-braces)
              ("(" . my/smart-bracket)
              (";" . my/insert-double-semicolon)))
#+END_SRC

*** Flycheck Joker

[[https://github.com/candid82/flycheck-joker][flycheck-joker]] is a clojure linter.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-joker)
#+END_SRC

** Http

[[https://github.com/pashky/restclient.el][restclient]] a tool for manually exploring and testing HTTP REST webservices.

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :defer t
  :mode ("\\.\\(http\\|rest\\)$" . restclient-mode))
#+END_SRC

** Javascript
*** Json mode

[[Major mode for editing JSON file][Json Mode]] is a major mode for editing JSON file.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :defer t)
#+END_SRC

*** rjsx-mode

[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]] handles files js/jsx.

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :config
  (setq indent-tabs-mode nil)
  (setq js-indent-level 2)
  (setq js2-basic-offset 2)
  (setq js2-strict-missing-semi-warning nil)
  (setq js2-mode-show-parse-errors nil)
  (setq js2-strict-trailing-comma-warning nil)
  (setq js2-strict-inconsistent-return-warning nil)
  (add-to-list 'auto-mode-alist '(".*\\.js\\'" . rjsx-mode)))
#+END_SRC

*** Add node modules path

[[https://github.com/codesuki/add-node-modules-path][add-node-modules-path]] allows Emacs to find project based installs of e.g. eslint.

#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :hook (rjsx-mode . add-node-modules-path))
#+END_SRC

*** Flycheck

Flycheck checks Javascript with one of javascript-eslint, javascript-jshint
or javascript-gjslint, and then with javascript-jscs.

Disable jshint.

#+BEGIN_SRC emacs-lisp
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))
#+END_SRC

Use eslint in rjsx-mode.

#+BEGIN_SRC emacs-lisp
(flycheck-add-mode 'javascript-eslint 'rjsx-mode)
#+END_SRC
* Misc
** Epub Reader

[[https://github.com/wasamasa/nov.el][nov.el]] an epub reader for emacs.

#+BEGIN_SRC emacs-lisp
(use-package nov
  :defer t
  :init
  (defun my/nov-font-setup ()
  (face-remap-add-relative 'variable-pitch
                            :family "Menlo"
                            :height 1.1)
  (nov-render-document))
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  :config
  (setq nov-text-width 80)
  :hook (nov-mode . my/nov-font-setup))
#+END_SRC

** Music

[[https://www.gnu.org/software/emms/][emms]] music player.

#+BEGIN_SRC emacs-lisp
(use-package emms
  :defer t
  :config
  (emms-standard)
  (emms-default-players)
  (emms-mode-line-disable)
  (emms-playing-time-disable-display)
  (setq emms-repeat-playlist t)
  (setq emms-source-file-default-directory "~/Dropbox/music"))
#+END_SRC

** Markdown Mode

[[https://github.com/jrblevin/markdown-mode][Markdown mode]] for rendering markdown.

#+BEGIN_SRC emacs-lisp
(defun my/clj-open-md-block-repl ()
  (interactive)
  (setq inferior-lisp-program
        "clojure -Sdeps {:deps{compliment{:mvn/version\"0.3.8\"}}}")
  (my/clj-open-repl))

(use-package markdown-mode
  :defer t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config (markdown-toggle-fontify-code-blocks-natively)
  :bind (:map markdown-mode-map
              ("C-c C-a" . my/clj-apropos)
              ("C-c C-z" . my/clj-open-md-block-repl)
              ("C-c C-d" . my/clj-doc-for-symbol)
              ("C-c C-s" . my/clj-source-for-symbol)
              ("C-c C-f" . my/clj-find-doc)
              ("C-x C-e" . my/clj-eval-last-sexp-with-ns)))
#+END_SRC

** Web Browser

eww is the built in emacs web browser.

#+BEGIN_SRC emacs-lisp
(use-package eww
  :straight nil
  :config
  (setq eww-bookmarks-directory "~/.emacs.d/emacs-sync/")
;; use default font/text size
  (setq shr-use-fonts nil)
;; ignore html specified colours
  (setq shr-use-colors nil)
;; disable images
  (setq shr-inhibit-images t)
;; disable animations
  (setq shr-image-animate nil)
;; don't render screen reader hidden tags
;; reduces noise on some sites
  (setq shr-discard-aria-hidden t))
#+END_SRC
