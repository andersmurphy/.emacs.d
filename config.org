* Installing Emacs
** OSX

Install emacs using homebrew.

#+BEGIN_SRC sh
brew install emacs --with-cocoa
#+END_SRC

Symlink Emacs.app to application folder (isn't supported by spotlight).

#+BEGIN_SRC sh
brew linkapps emacs
#+END_SRC

Remove the symlink.

#+BEGIN_SRC sh
rm /Applications/Emacs.app
#+END_SRC

Create an alias for emacs and move it to the application folder, this is supported
by spotlight.

#+BEGIN_SRC sh
osascript -e 'tell application "Finder" to make alias file to POSIX file "/usr/local/opt/emacs/Emacs.app" at POSIX file "/Applications"'
#+END_SRC

* Defaults
** Turn off alarms completly

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Answering 'y' or 'n'

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Keep all backup and auto-save files in one directory

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

#+END_SRC

** Kill current buffer rather than bringing up list

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

** Warn when opening large files

Warn when opening files bigger than 100MB.

#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000)
#+END_SRC

** Mode line settings

Add line and column number as well as file size to mode line.

#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
#+END_SRC

** Use Utf-8 encoding

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Appearance
** Menu, tool and scroll bars

Hide menu bar.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

Hide scroll and tool bar when not in terminal mode.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (scroll-bar-mode -1)
  (tool-bar-mode -1))
#+END_SRC

** Splash screen

Disables default splash screen, and sets it to show useful shortcuts.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
	  inhibit-startup-echo-area-message t)
(setq initial-buffer-choice "~/.emacs.d/useful-shortcuts.org")
#+END_SRC

** Theme
*** Spacemacs

[[https://github.com/nashamri/spacemacs-theme][Spacemacs-theme]] is a nice theme with both light/dark variants.

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :ensure t
  :defer t
  :init
  (load-theme 'spacemacs-light t))
#+END_SRC

** Initial frame

*** Size

Sets the initial frame to fill the height of the screen.

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . fullheight))
#+END_SRC

*** Position

Sets the initial frame to be flush with the top left corner of the screen.

#+BEGIN_SRC emasc-lisp
(add-to-list 'initial-frame-alist '(left . 0))
(add-to-list 'initial-frame-alist '(top . 0))
#+END_SRC

* Shell
** Exec path from shell

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] makes emacs shell behave like local shell.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
	:ensure t)
#+END_SRC

Sets $MANPATH, $PATH and exec-path from your shell, but only on OS X.
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
	(exec-path-from-shell-initialize))
#+END_SRC

* Text Manipulation
** Delete selected region when typing

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

** Tab width

Set tab width.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

** Smart tab

Tab will now contextually indent or complete.

#+BEGIN_SRC emacs-lisp
(setq tab-always-indent 'complete)
#+END_SRC

** Move Text

[[https://github.com/emacsfodder/move-text][MoveText]] is extracted from Basic edit toolkit. It allows you to move the
current line using M-up / M-down if a region is marked, it will move the
region instead.

#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :init
  (move-text-default-bindings))
#+END_SRC

** Flyspell

Install aspell.

#+BEGIN_SRC sh
brew install aspell
#+END_SRC

Turn spellcheck on, sets it to use aspell and british spelling.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (setq ispell-program-name "aspell"
		ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB"))
  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode))
#+END_SRC

* Navigation
** Recent files

[[https://www.emacswiki.org/emacs/RecentFiles][Recentf]] is a minor mode that builds a list of recently opened files.

#+BEGIN_SRC emacs-lisp
(recentf-mode t)
#+END_SRC

** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] a light weight fuzzy search completion framework.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
		   :ensure t
		   :config
		   (setq ivy-use-virtual-buffers t)
		   (setq ivy-count-format "(%d/%d) ")
		   :init
		   (ivy-mode t))
#+END_SRC

** Swiper

[[https://github.com/abo-abo/swiper][Swiper]] an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-s" . swiper))
#+END_SRC

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package projectile
		 :ensure t
		 :config
		 (setq projectile-completion-system 'ivy)
		 :init
		 (projectile-global-mode))
#+END_SRC

** Dumb jump

[[https://github.com/jacktasia/dumb-jump][Dumb Jump]] is an Emacs "jump to definition" package with support for multiple
programming languages that favors "just working". This means minimal -- and
ideally zero -- configuration with absolutely no stored indexes (TAGS) or
persistent background processes.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
   :ensure t
   :bind (("C-c j g" . dumb-jump-go)
	 ("C-c j b" . dumb-jump-back))
   :config
   (setq dumb-jump-selector 'ivy))
#+END_SRC

Dumb jump depends on [[https://github.com/BurntSushi/ripgrep#installation][ripgrep]].

#+BEGIN_SRC sh
brew install ripgrep
#+END_SRC

** Which key

[[https://github.com/justbur/emacs-which-key][Which-key]] is a minor mode for Emacs that displays the key bindings following
your currently entered incomplete command (a prefix) in a pop-up.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

* Project Management
** Magit

[[https://magit.vc/][Magit]] is a great interface for git projects.

#+BEGIN_SRC emacs-lisp
  (use-package magit
		   :ensure t
		   :defer t
		   :bind (("C-c g s" . magit-status)
			  ("C-c g b" . magit-blame))
		   :config
		   (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
		   (setq magit-completing-read-function 'ivy-completing-read))
#+END_SRC

*** Fullscreen magit

The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

#+BEGIN_SRC emacs-lisp
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+END_SRC

** Org mode
*** Enable Speed Keys

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

*** Org babel/source blocks
Enables source blocks syntax highlights and makes the editing popup
window stay within the same window.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t
	org-src-window-setup 'current-window
	org-src-strip-leading-and-trailing-blank-lines t
	org-src-preserve-indentation t
	org-src-tab-acts-natively t)
#+END_SRC

* Programming Languages
** General
*** Show line numbers

#+BEGIN_SRC emacs-lisp
 (add-hook 'prog-mode-hook (lambda () (linum-mode t)))
#+END_SRC

*** Electric pair mode

Automatically pair parens, brackets, quotes, etc...

#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

*** Show paren mode

Show matching Parens.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

*** Company mode

[[https://github.com/company-mode/company-mode][Company]] is a text completion framework for Emacs. The name stands
for "complete anything". It uses pluggable back-ends and front-ends
to retrieve and display completion candidates.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode))
#+END_SRC

*** White space clean up

Add whitespace-cleanup to your before-save-hook so that every
buffer is cleaned up before itâ€™s saved.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

*** YASnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates.

Snippets are stored in the /.emacs.d/snippets/ directory in directories
that match the mode they should be available in.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (yas-global-mode))
#+END_SRC

*** Flycheck

[[https://github.com/flycheck/flycheck][Flycheck]] on-the-fly syntax checking extension.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

** Lisps
*** Parinfer
[[https://github.com/DogLooksGood/parinfer-mode/blob/master/README.org][Parinfer]] infers lisp parentheses based on indentation.

#+BEGIN_SRC emacs-lisp
  (use-package parinfer
	:ensure t
	:bind
	(("C-," . parinfer-toggle-mode))
	:init
	(progn
	  (setq parinfer-extensions
		'(defaults
		  pretty-parens
		  paredit
		  smart-tab
		  smart-yank))
	  (add-hook 'clojure-mode-hook #'parinfer-mode)
	  (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
	  (add-hook 'common-lisp-mode-hook #'parinfer-mode)
	  (add-hook 'scheme-mode-hook #'parinfer-mode)
	  (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC

** Ruby
*** Other files that should be treated as ruby code

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist
		 '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . ruby-mode))
(add-to-list 'auto-mode-alist
		 '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . ruby-mode))
#+END_SRC

*** Flycheck

Flycheck checks Ruby with ruby-rubocop and ruby-rubylint, falling back to
ruby or ruby-jruby for basic syntax checking if those are not available.

** Javascript
*** Web mode
Handles files that mix html and js like jsx.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t)
#+END_SRC

*** Other files that should be treated as javascript code

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
#+END_SRC

*** Flycheck

Flycheck checks Javascript with one of javascript-eslint, javascript-jshint
or javascript-gjslint, and then with javascript-jscs.

** Json
*** Json mode

[[Major mode for editing JSON file][Json Mode]] is a major mode for editing JSON file.

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t)
#+END_SRC

*** Flycheck

Flycheck checks JSON with json-jsonlint or json-python-json.
